{"version":3,"sources":["header/Header.jsx","App.js","serviceWorker.js","index.js","header/me.jpg"],"names":["Header","react_default","a","createElement","AppBar_default","position","Toolbar_default","className","IconButton_default","color","aria-label","index_es","icon","faBars","size","Avatar_default","alt","src","MyProfile","component","href","target","faTwitter","faFacebookF","faGithub","faEnvelope","App","src_header_Header","Component","Boolean","window","location","hostname","match","theme","createMuiTheme","palette","primary","main","secondary","deepPurple","ReactDOM","render","styles","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"kVAmEeA,SApDA,WACb,OACEC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,SAAS,UACfJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAASK,UAAW,eAClBN,EAAAC,EAAAC,cAAA,OAAKI,UAAW,qBACdN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYO,MAAO,UAAWC,aAAW,QACvCT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAiBC,KAAMC,IAAQC,KAAM,SAGzCb,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAQc,IAAK,2BAA4BC,IAAKC,MAC9CjB,EAAAC,EAAAC,cAAA,OAAKI,UAAW,wBACdN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEO,MAAO,UACPU,UAAW,IACXC,KAAM,GACNC,OAAQ,SACRX,aAAW,4DAEXT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAiBC,KAAMU,IAAWR,KAAM,QAE1Cb,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEO,MAAO,UACPU,UAAW,IACXC,KAAM,GACNC,OAAQ,SACRX,aAAW,6DAEXT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAiBC,KAAMW,IAAaT,KAAM,QAE5Cb,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEO,MAAO,UACPU,UAAW,IACXC,KAAM,GACNC,OAAQ,SACRX,aAAW,2DAEXT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAiBC,KAAMY,IAAUV,KAAM,QAEzCb,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEO,MAAO,UACPU,UAAW,IACXC,KAAM,qCACNV,aAAW,sCAEXT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAiBC,KAAMa,IAAYX,KAAM,aC7CtCY,2LARX,OACEzB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAACwB,EAAD,cAJUC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,EAAQC,yBAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAWC,OAIfC,IAASC,OACPzC,EAAAC,EAAAC,cAACwC,EAAA,iBAAD,CAAkBT,MAAOA,GACvBjC,EAAAC,EAAAC,cAACyC,EAAD,OAEFC,SAASC,eAAe,SD4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.c67b3e06.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Avatar from '@material-ui/core/Avatar';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEnvelope, faBars } from '@fortawesome/free-solid-svg-icons';\nimport {\n  faGithub,\n  faFacebookF,\n  faTwitter,\n} from '@fortawesome/free-brands-svg-icons';\nimport MyProfile from './me.jpg';\nimport './Header.css';\n\nconst Header = () => {\n  return (\n    <AppBar position=\"static\">\n      <Toolbar className={'app-toolbar'}>\n        <div className={'app-toolbar__menu'}>\n          <IconButton color={'inherit'} aria-label=\"Menu\">\n            <FontAwesomeIcon icon={faBars} size={'lg'} />\n          </IconButton>\n        </div>\n        <Avatar alt={'Guillaume Rahbari avatar'} src={MyProfile} />\n        <div className={'app-toolbar__socials'}>\n          <IconButton\n            color={'inherit'}\n            component={'a'}\n            href={''}\n            target={'_blank'}\n            aria-label=\"Go to the twitter page of Guillaume Rahbari (new window)\"\n          >\n            <FontAwesomeIcon icon={faTwitter} size={'lg'} />\n          </IconButton>\n          <IconButton\n            color={'inherit'}\n            component={'a'}\n            href={''}\n            target={'_blank'}\n            aria-label=\"Go to the facebook page of Guillaume Rahbari (new window)\"\n          >\n            <FontAwesomeIcon icon={faFacebookF} size={'lg'} />\n          </IconButton>\n          <IconButton\n            color={'inherit'}\n            component={'a'}\n            href={''}\n            target={'_blank'}\n            aria-label=\"Go to the github page of Guillaume Rahbari (new window)\"\n          >\n            <FontAwesomeIcon icon={faGithub} size={'lg'} />\n          </IconButton>\n          <IconButton\n            color={'inherit'}\n            component={'a'}\n            href={'mailto:guillaume.rahbari@gmail.com'}\n            aria-label=\"Send an email to Guillaume Rahbari\"\n          >\n            <FontAwesomeIcon icon={faEnvelope} size={'lg'} />\n          </IconButton>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { Header } from './header';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport deepPurple from '@material-ui/core/colors/deepPurple';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#448aff',\n    },\n    secondary: deepPurple,\n  },\n});\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n    <App />\n  </MuiThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/me.320bdc69.jpg\";"],"sourceRoot":""}
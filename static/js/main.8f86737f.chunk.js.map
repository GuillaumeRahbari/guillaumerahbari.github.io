{"version":3,"sources":["header/Header.jsx","home/Home.jsx","App.js","serviceWorker.js","index.js","home/me.jpg"],"names":["withTheme","props","styles","section","color","theme","palette","secondary","main","react_default","a","createElement","className","style","IconButton_default","aria-label","index_es","icon","faBars","size","component","href","target","faTwitter","faFacebookF","faGithub","faEnvelope","primary","src","MyProfile","alt","App","src_header_Header","src_home_Home","Component","Boolean","window","location","hostname","match","createMuiTheme","ReactDOM","render","core_styles","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"mRAYeA,+BAAY,SAAgBC,GAAO,IAI1CC,EAAS,CACbC,QAAS,CACPC,MALcH,EAAVI,MACqBC,QAAQC,UAIXC,OAI1B,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAW,aAAcC,MAAOX,EAAOC,SAC9CM,EAAAC,EAAAC,cAAA,OAAKC,UAAW,oBACdH,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAYN,MAAO,UAAWW,aAAW,QACvCN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAiBC,KAAMC,IAAQC,KAAM,SAGzCV,EAAAC,EAAAC,cAAA,OAAKC,UAAW,uBACdH,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACEN,MAAO,UACPgB,UAAW,IACXC,KAAM,GACNC,OAAQ,SACRP,aAAW,4DAEXN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAiBC,KAAMM,IAAWJ,KAAM,QAE1CV,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACEN,MAAO,UACPgB,UAAW,IACXC,KAAM,GACNC,OAAQ,SACRP,aAAW,6DAEXN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAiBC,KAAMO,IAAaL,KAAM,QAE5CV,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACEN,MAAO,UACPgB,UAAW,IACXC,KAAM,GACNC,OAAQ,SACRP,aAAW,2DAEXN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAiBC,KAAMQ,IAAUN,KAAM,QAEzCV,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACEN,MAAO,UACPgB,UAAW,IACXC,KAAM,qCACNN,aAAW,sCAEXN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAiBC,KAAMS,IAAYP,KAAM,8BC1DpCnB,gCAAY,SAAcC,GAAO,IAIxCC,EAAS,CACbC,QAAS,CACPC,MALcH,EAAVI,MACmBC,QAAQqB,QAIXnB,OAGxB,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAW,oBAAqBC,MAAOX,EAAOC,SACrDM,EAAAC,EAAAC,cAAA,MAAIC,UAAW,SAAf,mCACAH,EAAAC,EAAAC,cAAA,gFAGAF,EAAAC,EAAAC,cAAA,OAAKC,UAAW,oBACdH,EAAAC,EAAAC,cAAA,OACEiB,IAAKC,IACLC,IAAK,2BACLlB,UAAW,8BCRNmB,2LATX,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,cALUC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMlC,EAAQmC,yBAAe,CAC3BlC,QAAS,CACPqB,QAAS,CACPnB,KAAM,WAERD,UAAW,CACTC,KAAM,cAKZiC,IAASC,OACPjC,EAAAC,EAAAC,cAACgC,EAAA,iBAAD,CAAkBtC,MAAOA,GACvBI,EAAAC,EAAAC,cAACiC,EAAD,OAEFC,SAASC,eAAe,SD2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.8f86737f.chunk.js","sourcesContent":["import React from 'react';\nimport { withTheme } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEnvelope, faBars } from '@fortawesome/free-solid-svg-icons';\nimport {\n  faGithub,\n  faFacebookF,\n  faTwitter,\n} from '@fortawesome/free-brands-svg-icons';\nimport './Header.css';\n\nexport default withTheme()(function Header(props) {\n  const { theme } = props;\n  const secondaryColor = theme.palette.secondary;\n\n  const styles = {\n    section: {\n      color: secondaryColor.main,\n    },\n  };\n\n  return (\n    <section className={'app-header'} style={styles.section}>\n      <div className={'app-header__menu'}>\n        <IconButton color={'inherit'} aria-label=\"Menu\">\n          <FontAwesomeIcon icon={faBars} size={'lg'} />\n        </IconButton>\n      </div>\n      <div className={'app-header__socials'}>\n        <IconButton\n          color={'inherit'}\n          component={'a'}\n          href={''}\n          target={'_blank'}\n          aria-label=\"Go to the twitter page of Guillaume Rahbari (new window)\"\n        >\n          <FontAwesomeIcon icon={faTwitter} size={'lg'} />\n        </IconButton>\n        <IconButton\n          color={'inherit'}\n          component={'a'}\n          href={''}\n          target={'_blank'}\n          aria-label=\"Go to the facebook page of Guillaume Rahbari (new window)\"\n        >\n          <FontAwesomeIcon icon={faFacebookF} size={'lg'} />\n        </IconButton>\n        <IconButton\n          color={'inherit'}\n          component={'a'}\n          href={''}\n          target={'_blank'}\n          aria-label=\"Go to the github page of Guillaume Rahbari (new window)\"\n        >\n          <FontAwesomeIcon icon={faGithub} size={'lg'} />\n        </IconButton>\n        <IconButton\n          color={'inherit'}\n          component={'a'}\n          href={'mailto:guillaume.rahbari@gmail.com'}\n          aria-label=\"Send an email to Guillaume Rahbari\"\n        >\n          <FontAwesomeIcon icon={faEnvelope} size={'lg'} />\n        </IconButton>\n      </div>\n    </section>\n  );\n});\n","import React from 'react';\nimport { withTheme } from '@material-ui/core/styles';\nimport MyProfile from './me.jpg';\nimport './Home.css';\n\nexport default withTheme()(function Home(props) {\n  const { theme } = props;\n  const primaryColor = theme.palette.primary;\n\n  const styles = {\n    section: {\n      color: primaryColor.main,\n    },\n  };\n  return (\n    <section className={'section-container'} style={styles.section}>\n      <h1 className={'title'}>Full-stack Javascript Lead tech</h1>\n      <h2>\n        I design and code beautifully simple things, and I love what I do.\n      </h2>\n      <div className={'app-home__avatar'}>\n        <img\n          src={MyProfile}\n          alt={'Guillaume Rahbari avatar'}\n          className={'app-home__avatar-img'}\n        />\n      </div>\n    </section>\n  );\n});\n","import React, { Component } from 'react';\nimport { Header } from './header';\nimport { Home } from './home';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#293347',\n    },\n    secondary: {\n      main: '#8C43FF',\n    },\n  },\n});\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n    <App />\n  </MuiThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/me.320bdc69.jpg\";"],"sourceRoot":""}